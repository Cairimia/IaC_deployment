name: 'Deploy IaC per Environment'
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  #### DEV ENVIRONMENT DEPLOYMENT ####
  dev_environment:
    name: 'Terraform DEV'
    runs-on: ubuntu-latest
    environment: dev
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./IaC/terraform
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.DEV_CREDENTIALS }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          tf_actions_working_dir: ./environments/DEV
          args: 'var-file="dev.tfvars"'
      - name: Terraform Format
        run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -no-color 
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
          
  #### PRE ENVIRONMENT DEPLOYMENT ####
  pre_environment:
    name: 'Terraform PRE'
    runs-on: ubuntu-latest
    environment: pre
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./IaC/terraform
        shell: bash
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.PRE_CREDENTIALS }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          tf_actions_working_dir: ./environments/PRE
          args: 'var-file="pre.tfvars"'
      - name: Terraform Format
        run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -no-color
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
            
  #### PRO ENVIRONMENT DEPLOYMENT ####
  pro_environment:
    name: 'Terraform PRO'
    runs-on: ubuntu-latest
    environment: pre
  # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./IaC/terraform
        shell: bash
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.PRO_CREDENTIALS}}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          tf_actions_working_dir: ./environments/PRE
          args: 'var-file="pro.tfvars"'
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -no-color
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
